\input texinfo
@settitle SmartCalc v1.0

@titlepage
@title SmartCalc v1.0 Documentation
@page
@vskip 0pt plus 1filll
@end titlepage

Simple and lightweight calculator and plotting tool

@chapter Overview

This is simple calculator that is capable of doing basic mathematical operations (add, multiple numbers and etc.)
and calculating functions such as sin, cos, exp and etc.
The calculator can be run in 3 modes.


@cindex index entry, another

@section Basic calc

Basic calculator is capable of counting algebraic expressions
with multiple operations, functions, brackets and etc.
You enter expression and then press "equal" button (=) to see the result.
Maximal length of expression is 255 symbols. 

If expression contains more than 255
(it cannot but if you really want to break the rules), excess symbols are ignored.

If expression contains errors (ex. sin5, ((x+1), 3-+-4 and etc.) it tries to complete or
interpret expression so it would have any mathematical sense (bracket will be closed automatically, 
+ or - will be replaced by chained unary operators). If error cannot be fixed, error message will be output 
to expression input textbox.

Examples:

@itemize
@item
7 + 44 (=) 51

@item
sin(1+2) (=) 0.1411200

@item
exp(3)/2/3.141 (=) 3.1973156
@end itemize

Calculation precision is 7 decimal places. If the result is too small/large then
it is converted to normalized science notation (ex. 3.14e-8).

Calculator also supports using "x" as substitution argument. If expression
contains "x" in itself, then user must specify its value in textbox (default value of x = 0).
This value will be substituted to expression and it will be calculated as normal one.

@section Plot calculator

If expression contains argument (x) in it, then calculator can be run in plot mode.
It will plot the function represented by input expression and output its graph
in designated window. It will calculate 255 values between given range (default [-5, 5]) and domain of
function will be determined by its values. Function input obeys same rules as basic expression input.

@section Credit calculator

Calculator also can be run in credit calculation mode.

@itemize
@item
Input: total credit amount, term, interest rate, type (annuity, differentiated)

@item
Output: monthly payment, overpayment on credit, total payment
@end itemize

@chapter Backend API

This section is for those who want to use model behind this application to 
build their own UI.

Model consists of two parts: translator and calculator.
@enumerate
@item
Translator sub-module is responsible for turning expression into a proccessable format
(fixing errors, lexema determination, lexema movement etc.) and translating expression into reverse polish notation (RPN).

@item
Calculator module is responsible for calculations whether it is RPN expression or credit calculations.
@end enumerate

@section Dependencies
The model currently depends only on one library: data_types (@url{https://github.com/DLWHI/data_types})

@section Translator API
@code{enum token_type} - responds to a token type

@code{token_type get_token_type(char* symbol)} - returns token type of a given string.
If a string has multiple types in it (ex. "123sinx") then first token type returned (in example case it will be DIGIT).

@code{char* next_token(char* infix)} - moves @code{infix} to next token and returns pointer to that new token

@code{void preprocess(char* infix)} - preprocesses the expression, must be run before translating to avoid errors.

@code{list* to_postfix(char* infix)} - converts expression into RPN and returns it in linked list form (see @code{data_types.h} for more information)

@code{double to_double(char* str, char* err_msg)} - @code{strtod} wrapper that writes to @code{*err_msg} on error strings.

@section Calcultor API

@code{double calculate(list* postfix, double arg_val, char* error_msg)} - calculates given RPN and returns its result. @code{double arg_val}
represents "x" value that should be substituted to expression. In case of calculation error message will be written to @code{*err_msg}

@code{void calculate_set(float* dst, int count, list* postfix, double* x_set, char* error_msg)} - calculates RPN on given set of numbers (that will be substitute "x").
Calculation results are written to @code{*dst} array which has exactly same size as @code{*x_set} (That will be 255).

@code{void generate_x_set(double* dst, int rate, double l, double r)} - generates set of dots on given [l, r] range. The dots are 
placed evenly so distance between all of them are equal. Result is written to @code{*dst}.

@section Credit calcultor API

@code{double get_credit_monthly(double credit, double irate, int months, int type)} - calculates monthly credit payment for given parameters. @code{type} responds to a 
payment type:
@itemize
@item
0 for annuity payment

@item
1 for minimum differentiated payment

@item
2 for maximum differentiated payment
@end itemize

Other data (overpayment on credit, total payment) are calculated easily thus there is no API that
responds to their calculations. These calculations can be done easily on front-side (which has been done in my version).

@bye